<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-4.0.xsd
        http://www.springframework.org/schema/lang
        http://www.springframework.org/schema/lang/spring-lang-4.0.xsd
http://www.springframework.org/schema/task
http://www.springframework.org/schema/task/spring-task-4.0.xsd ">

    
    <!--    database configuration-->
    <aop:aspectj-autoproxy />
    <task:annotation-driven executor="springExecutorService" scheduler="taskScheduler"/>
  
    <!--
    The 'executor' element:
    When a task is submitted, the executor will first
    try to use a free thread if the number of active threads is currently less than
    the core size. If the core size has been reached, then the task will be added
    to the queue as long as its capacity has not yet been reached. Only then,
    if the queue's capacity has been reached, will the executor create a new
    thread beyond the core size. If the max size has also been reached, then
    the executor will reject the task
    See: 25.4.2 The 'executor' element -->
    <!-- Defines a ThreadPoolTaskExecutor instance with configurable pool size, queue-capacity, keep-alive,
    and rejection-policy values. The id becomes the default thread name prefix -->
    <task:executor id="springExecutorService"
                   pool-size="5-25"
                   queue-capacity="100"/>
   
    <!-- Defines a ThreadPoolTaskScheduler instance with configurable pool size.
    The id becomes the default thread name prefix. -->             
    <task:scheduler id="taskScheduler" pool-size="1"/> 
  
    <context:property-placeholder location="file:///C:/usr/share/scribbles/conf.properties" />
    <!--<context:property-placeholder location="file:////usr/share/scribbles/conf.properties" />-->
    
    
    <!--    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.gmail.com" />
        <property name="port" value="465" />
        <property name="username" value="udubic@gmail.com" />
        <property name="password" value="dcamic4602" />
    </bean>-->
    
    <bean id="mailService" class="com.dubic.scribbleit.email.MailServiceImpl">
        <property name="host" value="${mail.host}"/>
        <property name="port" value="${mail.port}"/>
        <property name="username" value="${mail.username}"/>
        <property name="password" value="${mail.password}"/>
        <property name="sender" value="${mail.sender}"/>
        <property name="senderName" value="${mail.sender.name}"/>
        <property name="velocityEngine" ref="velocityEngine"/>
        <property name="sslOnConnect" value="${mail.ssl.connect}"/>
        <property name="sslCheckServer" value="${mail.ssl.check}"/>
        <property name="startTlsEnabled" value="${mail.ssl.tls.enabled}"/>
        <property name="templatePath" value="${mail.template.path}"/>
        <!--<property name="sslOnConnect" value="true"/>-->
    </bean>
    
    <bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
        <property name="velocityProperties">
            <value>
                resource.loader=class
                class.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
            </value>
        </property>
    </bean>
    
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>
 
    <import resource="datasourceConfig.xml"/>
    <context:component-scan base-package="com.dubic.module.el"/>
    <context:component-scan base-package="com.dubic.scribbleit"/>
    
</beans>